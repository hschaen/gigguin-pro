rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(resource) {
      return isAuthenticated() && request.auth.uid == resource.data.owner;
    }
    
    function isOrgAdmin(orgId) {
      return isAuthenticated() && 
        (get(/databases/$(database)/documents/organizations/$(orgId)).data.owner == request.auth.uid ||
         request.auth.uid in get(/databases/$(database)/documents/organizations/$(orgId)).data.admins);
    }
    
    function isOrgMember(orgId) {
      return isAuthenticated() && 
        (isOrgAdmin(orgId) ||
         request.auth.uid in get(/databases/$(database)/documents/organizations/$(orgId)).data.members);
    }
    
    function belongsToOrg(orgId) {
      return resource.data.orgId == orgId;
    }
    
    // Organizations
    match /organizations/{orgId} {
      allow read: if isOrgMember(orgId) || resource.data.isActive == true;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.owner;
      allow update: if isOrgAdmin(orgId);
      allow delete: if isOwner(resource);
    }
    
    // Organization Invites
    match /organization_invites/{inviteId} {
      allow read: if true; // Public for accepting invites
      allow create: if isAuthenticated() && isOrgAdmin(request.resource.data.orgId);
      allow update: if isAuthenticated(); // For accepting invites
      allow delete: if isOrgAdmin(resource.data.orgId);
    }
    
    // Events - scoped to organization
    match /events/{eventId} {
      allow read: if resource.data.isActive == true || 
                    (resource.data.orgId != null && isOrgMember(resource.data.orgId));
      allow create: if isAuthenticated() && 
                      request.resource.data.orgId != null && 
                      isOrgAdmin(request.resource.data.orgId);
      allow update: if resource.data.orgId != null && isOrgAdmin(resource.data.orgId);
      allow delete: if resource.data.orgId != null && isOrgAdmin(resource.data.orgId);
    }
    
    // Event Instances - scoped to organization
    match /event-instances/{instanceId} {
      allow read: if resource.data.isPublic == true || 
                    (resource.data.orgId != null && isOrgMember(resource.data.orgId));
      allow create: if isAuthenticated() && 
                      request.resource.data.orgId != null && 
                      isOrgAdmin(request.resource.data.orgId);
      allow update: if resource.data.orgId != null && isOrgAdmin(resource.data.orgId);
      allow delete: if resource.data.orgId != null && isOrgAdmin(resource.data.orgId);
    }
    
    // DJs - organization can have preferred DJs
    match /djs/{djId} {
      allow read: if true; // Public directory
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                      (request.auth.uid == resource.data.createdBy ||
                       (resource.data.orgId != null && isOrgAdmin(resource.data.orgId)));
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.createdBy;
    }
    
    // Bookings - scoped to organization
    match /bookings/{bookingId} {
      allow read: if resource.data.orgId != null && isOrgMember(resource.data.orgId);
      allow create: if isAuthenticated() && 
                      request.resource.data.orgId != null && 
                      isOrgAdmin(request.resource.data.orgId);
      allow update: if resource.data.orgId != null && isOrgAdmin(resource.data.orgId);
      allow delete: if resource.data.orgId != null && isOrgAdmin(resource.data.orgId);
    }
    
    // Venues - can be owned by organizations
    match /venues/{venueId} {
      allow read: if true; // Public directory
      allow create: if isAuthenticated() && 
                      request.resource.data.orgId != null && 
                      isOrgAdmin(request.resource.data.orgId);
      allow update: if resource.data.orgId != null && isOrgAdmin(resource.data.orgId);
      allow delete: if resource.data.orgId != null && isOrgAdmin(resource.data.orgId);
    }
    
    // Payments - scoped to organization
    match /payments/{paymentId} {
      allow read: if resource.data.orgId != null && isOrgMember(resource.data.orgId);
      allow create: if isAuthenticated() && 
                      request.resource.data.orgId != null && 
                      isOrgAdmin(request.resource.data.orgId);
      allow update: if resource.data.orgId != null && isOrgAdmin(resource.data.orgId);
      allow delete: if false; // Payments should never be deleted
    }
    
    // RSVP - public for submission, org members can read
    match /rsvp/{rsvpId} {
      allow read: if true; // Public for QR verification
      allow create: if true; // Public can RSVP
      allow update: if resource.data.orgId != null && isOrgMember(resource.data.orgId);
      allow delete: if resource.data.orgId != null && isOrgAdmin(resource.data.orgId);
    }
    
    // Guest Lists - scoped to organization
    match /guest-lists/{listId} {
      allow read: if resource.data.orgId != null && isOrgMember(resource.data.orgId);
      allow create: if isAuthenticated() && 
                      request.resource.data.orgId != null && 
                      isOrgMember(request.resource.data.orgId);
      allow update: if resource.data.orgId != null && isOrgMember(resource.data.orgId);
      allow delete: if resource.data.orgId != null && isOrgAdmin(resource.data.orgId);
    }
    
    // Users - personal profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false; // Users cannot be deleted through client
    }
  }
}